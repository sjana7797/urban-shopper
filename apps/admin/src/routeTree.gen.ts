/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'

// Create Virtual Routes

const IndexLazyImport = createFileRoute('/')()
const ProductIndexLazyImport = createFileRoute('/product/')()
const HealthIndexLazyImport = createFileRoute('/health/')()
const ProductAddLazyImport = createFileRoute('/product/add')()
const ProductPostIdIndexLazyImport = createFileRoute('/product/$postId/')()
const ProductPostIdEditLazyImport = createFileRoute('/product/$postId/edit')()

// Create/Update Routes

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const ProductIndexLazyRoute = ProductIndexLazyImport.update({
  id: '/product/',
  path: '/product/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/product/index.lazy').then((d) => d.Route))

const HealthIndexLazyRoute = HealthIndexLazyImport.update({
  id: '/health/',
  path: '/health/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/health/index.lazy').then((d) => d.Route))

const ProductAddLazyRoute = ProductAddLazyImport.update({
  id: '/product/add',
  path: '/product/add',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/product/add.lazy').then((d) => d.Route))

const ProductPostIdIndexLazyRoute = ProductPostIdIndexLazyImport.update({
  id: '/product/$postId/',
  path: '/product/$postId/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/product/$postId/index.lazy').then((d) => d.Route),
)

const ProductPostIdEditLazyRoute = ProductPostIdEditLazyImport.update({
  id: '/product/$postId/edit',
  path: '/product/$postId/edit',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/product/$postId/edit.lazy').then((d) => d.Route),
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/product/add': {
      id: '/product/add'
      path: '/product/add'
      fullPath: '/product/add'
      preLoaderRoute: typeof ProductAddLazyImport
      parentRoute: typeof rootRoute
    }
    '/health/': {
      id: '/health/'
      path: '/health'
      fullPath: '/health'
      preLoaderRoute: typeof HealthIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/product/': {
      id: '/product/'
      path: '/product'
      fullPath: '/product'
      preLoaderRoute: typeof ProductIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/product/$postId/edit': {
      id: '/product/$postId/edit'
      path: '/product/$postId/edit'
      fullPath: '/product/$postId/edit'
      preLoaderRoute: typeof ProductPostIdEditLazyImport
      parentRoute: typeof rootRoute
    }
    '/product/$postId/': {
      id: '/product/$postId/'
      path: '/product/$postId'
      fullPath: '/product/$postId'
      preLoaderRoute: typeof ProductPostIdIndexLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/product/add': typeof ProductAddLazyRoute
  '/health': typeof HealthIndexLazyRoute
  '/product': typeof ProductIndexLazyRoute
  '/product/$postId/edit': typeof ProductPostIdEditLazyRoute
  '/product/$postId': typeof ProductPostIdIndexLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/product/add': typeof ProductAddLazyRoute
  '/health': typeof HealthIndexLazyRoute
  '/product': typeof ProductIndexLazyRoute
  '/product/$postId/edit': typeof ProductPostIdEditLazyRoute
  '/product/$postId': typeof ProductPostIdIndexLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/product/add': typeof ProductAddLazyRoute
  '/health/': typeof HealthIndexLazyRoute
  '/product/': typeof ProductIndexLazyRoute
  '/product/$postId/edit': typeof ProductPostIdEditLazyRoute
  '/product/$postId/': typeof ProductPostIdIndexLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/product/add'
    | '/health'
    | '/product'
    | '/product/$postId/edit'
    | '/product/$postId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/product/add'
    | '/health'
    | '/product'
    | '/product/$postId/edit'
    | '/product/$postId'
  id:
    | '__root__'
    | '/'
    | '/product/add'
    | '/health/'
    | '/product/'
    | '/product/$postId/edit'
    | '/product/$postId/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  ProductAddLazyRoute: typeof ProductAddLazyRoute
  HealthIndexLazyRoute: typeof HealthIndexLazyRoute
  ProductIndexLazyRoute: typeof ProductIndexLazyRoute
  ProductPostIdEditLazyRoute: typeof ProductPostIdEditLazyRoute
  ProductPostIdIndexLazyRoute: typeof ProductPostIdIndexLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  ProductAddLazyRoute: ProductAddLazyRoute,
  HealthIndexLazyRoute: HealthIndexLazyRoute,
  ProductIndexLazyRoute: ProductIndexLazyRoute,
  ProductPostIdEditLazyRoute: ProductPostIdEditLazyRoute,
  ProductPostIdIndexLazyRoute: ProductPostIdIndexLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/product/add",
        "/health/",
        "/product/",
        "/product/$postId/edit",
        "/product/$postId/"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/product/add": {
      "filePath": "product/add.lazy.tsx"
    },
    "/health/": {
      "filePath": "health/index.lazy.tsx"
    },
    "/product/": {
      "filePath": "product/index.lazy.tsx"
    },
    "/product/$postId/edit": {
      "filePath": "product/$postId/edit.lazy.tsx"
    },
    "/product/$postId/": {
      "filePath": "product/$postId/index.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
